{"./":{"url":"./","title":"简介","keywords":"","body":"前端性能与工程化 本网站包含前端性能与工程化课程的全部教学资料，包括：课程大纲、学习交流 QQ 群、课程视频、通关任务以及示例代码。 课程大纲 前端性能优化大纲 前端工程化大纲 学习交流群 王顶老师的 QQ 学习交流群：301862163，加群时请报上自己的真实姓名，以及正在学习的课程内容。（软件学院的学生不要加群） 课程视频 每个视频其内容相对独立，时长较短，因此整个课程的视频数量比较多。把视频链接和课程大纲整合在一起，形成整门课程的视频清单方便大家按需观看。 通关任务 按课程讲授的顺序，排列在电子书左侧导航中，所有通关任务对应有参考的示例代码，请见下面 spa-demo 仓库的链接。 示例代码 wngding/wpo-demo 仓库，Web 前端性能优化的各种示例。 在线矩形计算器，仓库地址：wangding/rectangle。在线矩形计算器是 SPA 课程的第一个大作业，覆盖了课程的前半部分内容。用户输入矩形的长度和宽度，程序计算出矩形的面积和周长。应用程序的开发涉及到自动化构建的静态代码检查、单元测试和性能优化，以及数据合法性校验等技术。 wangding/webpack-demo 仓库，演示 Webpack 各种自动化构建任务，包括：预编译、单元测试、静态代码检查和性能优化，等。 SPA 课程示例，仓库地址：wangding/spa-demo。课程示例包含课上所有小的 Demo 示例代码，整个网站是个单页应用，使用了自动化构建技术。 在线记事本，仓库地址：wangding/jsnotepad。这个综合案例覆盖课程后半部分内容，实践 UI 组件化开发思想。包含五个对话框 UI 组件的封装，一个列表控件的封装以及三个主界面组件（菜单栏、编辑器和状态栏）的封装。并实现自动化构建。 2018 -  by 王顶. All rights reserved.本站访客人数  人次document.getElementsByClassName(\"bsz-this-year\")[0].innerHTML = new Date().getFullYear(); window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"086e21b153d1d4f035be\",\"clientSecret\":\"62086ccd1d88050f3f9d4fe2124844dcfaac8ba6\",\"repo\":\"spa\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"SPA\"],\"id\":\"/README.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"086e21b153d1d4f035be\",\"clientSecret\":\"62086ccd1d88050f3f9d4fe2124844dcfaac8ba6\",\"repo\":\"spa\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"SPA\"],\"id\":\"/README.html\"});gitalk.render(\"gitalk-container\"); "},"chapters/ch01-introduction.html":{"url":"chapters/ch01-introduction.html","title":"课程说明","keywords":"","body":"课程说明 阅读参考资料 docker 官网 docker 笔记 docker 教程 写给前端的 Docker 实战教程 浏览器的工作原理：新式网络浏览器幕后揭秘 现代浏览器内部揭秘：第一部分 现代浏览器内部揭秘：第二部分 现代浏览器内部揭秘：第三部分 现代浏览器内部揭秘：第四部分 安装 Docker 操作步骤如下： sudo yum install -y yum-utils sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo sudo yum install docker-ce docker-ce-cli containerd.io sudo yum list docker-ce --showduplicates | sort -r sudo systemctl start docker sudo systemctl status docker sudo systemctl enable docker docker version 配置 Docker 操作步骤如下： # 以非 root 用户身份使用 docker sudo usermod -aG docker $USER # $USER 是当前登录的用户 # 此命令执行后，需注销，重新登录，才生效 # 使用阿里 docker 镜像，提高镜像拉取速度 sudo mkdir -p /etc/docker sudo tee /etc/docker/daemon.json 运行 nginx 容器 操作步骤如下： docker run -d \\ --name web \\ -p 8080:80 \\ nginx:alpine docker ps -a 用 chrome 浏览器访问 http://:8080 应该能看到 nginx 的欢迎页面 修改 index.html 操作步骤如下： 在上一个任务的基础上 确保 web 容器已经启动并运行 以交互模式进入 web 容器docker exec -it web /bin/sh 修改 index.html，内容随意，改后保存退出vi /usr/share/nginx/html/index.html 推出容器的交互模式，exit 浏览器访问 nginx http://:8080 应该能看到自己修改后的页面 思考这种方式的弊端 挂载静态网站 操作步骤如下： 停止并删除 web 容器docker stop web docker rm web 在家目录，创建 web root 目录，mkdir web-root 在 web-root 目录下，添加 index.html，内容随意 把 web-root 目录挂载到 nginx 容器中docker run -d \\ --name web \\ -p 8080:80 \\ -v /home/wangding/web-root:/usr/share/nginx/html \\ nginx:alpine docker ps -a 用 chrome 浏览器访问 http://:8080 应该能看到 web-root 目录下的 index.html 页面 定制镜像 操作步骤如下： 在上一个任务的基础上 停止并删除 web 容器docker stop web docker rm web 在家目录创建文件夹 docker-demo，mkdir docker-demo && cd docker-demo 在 docker-demo 文件夹中，创建 Dockerfile 文件，touch Dockerfile 把上个任务的 www-root 目录移动到 docker-demo 文件夹中，mv ~/www-root ~/docker-demo 编辑 Dockerfile，vi DockerfileFROM nginx:alpine COPY ./web-root/ /usr/share/nginx/html/ EXPOSE 80 制作自己的 nginx 镜像，docker build . -t hello-docker:1.0.0 --rm=true 启动容器docker run -d --name web -p 8080:80 hello-docker:1.0.0 用 chrome 浏览器访问 http://:8080 应该能看到 web-root 目录下的 index.html 页面 2018 -  by 王顶. All rights reserved.本站访客人数  人次document.getElementsByClassName(\"bsz-this-year\")[0].innerHTML = new Date().getFullYear(); window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"086e21b153d1d4f035be\",\"clientSecret\":\"62086ccd1d88050f3f9d4fe2124844dcfaac8ba6\",\"repo\":\"spa\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"SPA\"],\"id\":\"/chapters/ch01-introduction.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"086e21b153d1d4f035be\",\"clientSecret\":\"62086ccd1d88050f3f9d4fe2124844dcfaac8ba6\",\"repo\":\"spa\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"SPA\"],\"id\":\"/chapters/ch01-introduction.html\"});gitalk.render(\"gitalk-container\"); "},"chapters/ch01-wpo-introduction.html":{"url":"chapters/ch01-wpo-introduction.html","title":"第一章：性能优化概述","keywords":"","body":"第 1 章：性能优化概述 注意： 如无特别说明，后续操作的对象都是 wpo-demo 仓库 下载代码仓库，git clone https://bitbucket.org/wngding/wpo-demo.git 安装项目依赖，cd wpo-demo && npm install 阅读参考资料 压缩 CSS 压缩 JavaScript 启用文本压缩 使用 imagemin 压缩图像 用 Network 评估网站性能 操作步骤如下： 启动 wd01 网站，npx http-server wd01 用 chrome 浏览器访问 http://:8080/ 在 Network 面板，设置 Disable cache 以及 Fast 3G 节流 在 Network 面板，设置 Start recording network log F5 刷新网站页面，观察瀑布流图，能够描述出资源加载的顺序 根据 Network 面板下的统计信息，对网站的性能有所了解 对 Network 面板截图保存 关闭 wd01，CTRL + C 启动 wd01-optimized 网站，npx http-server wd01-optimized F5 刷新网站页面 用 Network 面板观察性能优化前后网站加载速度的差异 查看 wd01-optimized 目录下的静态资源文件与 wd01 目录下的区别 压缩代码 操作步骤如下： 复制 wd01 为 minify 目录，cp -r wd01 minify 进入 minify 目录，cd minify 利用 minifier 压缩 CSS 代码，cd css && npx minifier -o styles.min.css styles.css 查看压缩前后 CSS 文件大小的差异，ls -lh 同样道理，利用 minifier 压缩 JS 代码 利用 html-minify 压缩 HTML 代码 修改 index.html 使用压缩后的 CSS 和 JS 代码 启动 minify 网站，npx http-server minify 用 Network 面板观察性能优化前后网站加载速度的差异 压缩图片 操作步骤如下： 用 tinyPNG 对 minify/img 目录下的图片文件进行压缩优化 观察图片压缩前后文件尺寸的差距 下载压缩优化后的图片，替换 img 目录下的原始图片 启动 HTTP 静态文件服务，npx http-server minify 用 Network 面板观察性能优化前后网站加载速度的差异 HTTP 传输的 GZip 压缩 操作步骤如下： 压缩 minify 目录下的 index.html，gzip index.html 查看压缩后的结果，ls 启动 HTTP 静态文件服务，npx http-server minify -g -g 参数启用 gzip 压缩 用 Network 面板观察性能优化前后网站加载速度的差异 在 Network 面板下，勾选 Use Large request rows 选项 F5 刷新网站页面，观察 index.html 页面传输的字节数与实际字节数的差异 为什么 index.html 传输的字节数小于实际字节数？ 查看 index.html 页面的 HTTP 请求头和响应头，能否找到 gzip 压缩编码的头字段？ 观察 CSS 和 JS 资源传输的字节数和实际字节数 为什么传输的字节数大于实际字节数？ 查看这些资源的 HTTP 请求头和响应头，能否找到 gzip 压缩编码的头字段？ 通过 xxd 命令，观察 gzip 压缩前后 index.html 文件编码格式的变化xxd index.html xxd index.html.gz 思考 minify 和 compress 的区别 nginx 启用 GZip 压缩 操作步骤如下： 还原 index.html.gz 压缩文件，gzip -d index.html.gz 启动 nginx 容器docker run -d \\ --name web \\ -p 8080:80 \\ -v :/usr/share/nginx/html/ \\ nginx:alpine 通过 chrome 浏览器查看网站，http://:8080 在 Network 面板下，观察资源的 HTTP 传输字节数和实际字节数 HTTP 数据传输中是否发生 GZip 压缩？ 以 bash 交互的方式，进入 nginx 容器，docker exec -it web /bin/sh 查看网站内容，cd /usr/share/nginx/html && ls 修改 nginx 配置文件，启用 GZip 压缩，cd /etc/nginx && vi nginx.conf 重启 nginx 服务，nginx -s reload F5 刷新网站页面，观察 index.html 页面传输的字节数与实际字节 数的差异，发现只有 index.html 文件做了压缩 继续修改 nginx.conf，添加如下配置：gzip_min_length 1024; gzip_types application/javascript text/css text/xml; 了解 GZip 更多的配置参数，请阅读：ngx_http_gzip_module 重启 nginx 服务，nginx -s reload F5 刷新网站页面，观察是否所以静态资源得到了压缩 2018 -  by 王顶. All rights reserved.本站访客人数  人次document.getElementsByClassName(\"bsz-this-year\")[0].innerHTML = new Date().getFullYear(); window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"086e21b153d1d4f035be\",\"clientSecret\":\"62086ccd1d88050f3f9d4fe2124844dcfaac8ba6\",\"repo\":\"spa\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"SPA\"],\"id\":\"/chapters/ch01-wpo-introduction.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"086e21b153d1d4f035be\",\"clientSecret\":\"62086ccd1d88050f3f9d4fe2124844dcfaac8ba6\",\"repo\":\"spa\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"SPA\"],\"id\":\"/chapters/ch01-wpo-introduction.html\"});gitalk.render(\"gitalk-container\"); "},"chapters/ch02-wpo-tools.html":{"url":"chapters/ch02-wpo-tools.html","title":"第二章：性能评估工具","keywords":"","body":"第 2 章：性能评估工具 用 Network 观察页面加载过程 操作步骤如下： 用 chrome 打开 https://wpocs.cn 网站 用 Network 面板，查看网站加载的过程 思考对于某一种静态资源，浏览器加载的完整过程是什么？ 在瀑布图的时间条上悬停，查看某资源加载各个阶段的耗时，看看资源加载分几个大的阶段，每个阶段又有哪些小的阶段 思考是否每种资源加载的过程都是完全相同的？ 用 chrome 浏览上一章的电器维修网站 用 Network 面板，查看网站加载的过程 观察 index.html 页面加载的响应头中的字段 Connetction: Keep-Alive 和 Keep-Alive: timeout=5 思考 Keep-Alive 的作用，为网站性能优化带来的好处 了解 TTFB 性能指标描述的内容，网站性能优化，应该提高 TTFB 还是减少 TTFB 在纸上把浏览器加载静态资源的各个阶段画下来 用 Ligthouse 测评网站性能 操作步骤如下： 使用 Lighthouse 对以下两个企业网站做性能评测 云袭网络：http://www.yunxi.cn/ 航星永志：https://www.hasng.cn/ 设置 Lighthouse 只测评网站性能，并选择桌面设备测评 查看测评报告，了解网站有哪些可以做性能优化的方面 用 Lighthouse 对自己感兴趣的网站做性能评测 将评测数据保存到本地磁盘 思考六个性能指标的含义 用 Performance 了解网站渲染过程 操作步骤如下： 使用 Performance 对云袭网络做性能评测 通过 Performance 的信息，观察和印证浏览器的工作原理 通过 Performance 的信息，观察和印证页面渲染的过程 思考 Performance 的火焰图，水平方向和垂直方向各代表什么 观察 Performance 和 Network 信息是否对应 通过 Performance 观察浏览器的四类活动： 加载（蓝色） 脚本（黄色） 渲染（紫色） 绘制（绿色） 用 WebpageTest 做性能评测 操作步骤如下： 用 WebpageTest 在全球不同地点，对 http://spa.wangding.co 网站做性能评估 浏览器第一个标签页，Advanced 选择：北美，城市随意，其他默认 浏览器第二个标签页，Advanced 选择：亚洲，北京，其他默认 点击 Start Test 按钮 观察两个不同地点对同一个网站，性能指标有何差异 思考是什么原因导致的 用 WebpageTest 对自己感兴趣的网站做性能测试，可以调整测试的参数，包括： 地点 设备 性能模型 网络速度 浏览器型号，等 查看测试报告，除了性能指标，可以查看瀑布图 阅读参考资料 页面级指标 请求级指标 速度指数 前端应用的性能指标 性能指标都是些什么鬼? JavaScript 基准测试 操作步骤如下： 启动 wd01 网站，npx http-server wd01 在 chrome 的控制台面板下，做两种 DOM 查询： jQuery DOM 查询：$('.logo')[0] H5 内置查询方法：document.querySelector('.logo') 确认查到了电器维修网站的 logo 用 console.time 和 console.timeEnd 方法做基准测试 比较 jQuery DOM 查询和 H5 内置查询方法，哪个速度更快 在控制台执行代码：console.time('jQuery'); $('.logo'); console.timeEnd('jQuery'); console.time('H5-selector'); document.querySelector('.logo'); console.timeEnd('H5-selector'); 多执行几次，观察每次执行的时长是否相同，快慢的结论有变化吗？ 2018 -  by 王顶. All rights reserved.本站访客人数  人次document.getElementsByClassName(\"bsz-this-year\")[0].innerHTML = new Date().getFullYear(); window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"086e21b153d1d4f035be\",\"clientSecret\":\"62086ccd1d88050f3f9d4fe2124844dcfaac8ba6\",\"repo\":\"spa\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"SPA\"],\"id\":\"/chapters/ch02-wpo-tools.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"086e21b153d1d4f035be\",\"clientSecret\":\"62086ccd1d88050f3f9d4fe2124844dcfaac8ba6\",\"repo\":\"spa\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"SPA\"],\"id\":\"/chapters/ch02-wpo-tools.html\"});gitalk.render(\"gitalk-container\"); "},"chapters/ch03-opt-css.html":{"url":"chapters/ch03-opt-css.html","title":"第三章：优化 CSS","keywords":"","body":"第 3 章：优化 CSS 阅读参考资料 延迟加载非关键 CSS 压缩 CSS 提取关键 CSS (Critical CSS) 使用媒体查询优化 CSS 背景图像 CSS 简写属性 简写 CSS 操作步骤如下： 复制 wd01 文件夹为 shorthand，cp -r wd01 shorthand 检查 css/styles.css 代码中是否使用简写，grep -n \"margin\\|padding\\|border\" css/styles.css 用 postcss 工具和 postcss-merge-longhand 插件，完成 CSS 代码的简写重构 注意：postcss-merge-longhand 只处理 CSS 代码中的 margin, padding 和 border 三种简写 安装 postcss 和插件，npm i -D postcss-cli postcss-merge-longhand 编写 postcss 的配置文件 postcss.config.jsmodule.exports = { plugins: [ require('postcss-merge-longhand')() ] } 运行命令，npx postcss styles.css -o styles.short.css 检查优化前后 CSS 文件大小的变化，ls -lh 检查优化前后 CSS 文件行数的变化，wc -l styles.css styles.short.css 比较优化前后 CSS 文件的具体变化，vimdiff style.css styles.short.css 运行修改后的网站，npx http-server shorthand 确保网站的样式和修改之前没有变化 使用浅选择器 操作步骤如下： 复制 wd01 文件夹为 shallow，cp -r wd01 shallow 检查 css/styles.css 代码中是否使用浅选择器，grep -n \"{\" css/styles.css 手工修改几个选择器为浅选择器 运行修改后的网站，npx http-server shallow 确保网站的样式和修改之前没有变化 去掉不用的 CSS 操作步骤如下： 复制 wd01 文件夹为 unused，cp -r wd01 unused 安装 uncss 工具，npm i -D uncss 运行网站，npx http-server unused 运行 uncss 工具，npx uncss http://localhost:8080 > out.css 备份原有的 CSS 代码文件，mv styles.css styles.css.bak 修改 out.css 文件名，并放到 css 目录下，mv out.css styles.css 重新运行网站，观察优化后的网站样式是否正常 比较优化前后两个 CSS 文件的差异，vimdiff styles.css styles.css.bak 注意：uncss 工具不是很智能，可能会误删除一些有用的代码，使用时一定要仔细测试 运行 wd02 网站，npx http-server wd02 运行 uncss 工具，npx uncss http://localhost:8080 > out.css 比较优化前后两个 CSS 文件的差异，vimdiff styles.css out.css 观察有用的 CSS 代码是否被误删除 去掉冗余的 CSS 操作步骤如下： 复制 wd01 文件夹为 redundance，cp -r wd01 redundance 安装 csscss 工具，gem install csscss 运行 csscss 工具分析 wd01 网站的 CSS 冗余代码，csscss -v --no-match-shorthand styles.css 根据分析的冗余代码修改原有的 CSS 代码文件 对修改后的 CSS 代码，用 csscss 再次分析，直到没有冗余代码为止 比较修改后的 CSS 代码与源文件的行数，wc -l wd01/css/styles.css redundance/css/styles.css 比较修改后的 CSS 代码与源代码文件的差异，vimdiff wd01/css/styles.css redundance/css/styles.css 避免使用 @import 声明 操作步骤如下： 运行 wd03 网站，npx http-server wd03 打开 Network 面板，在快速 3G 网络限流的条件下，过滤查看所有 CSS 文件的加载过程 是否看到 CSS 文件分四组串行加载，在每一组中 CSS 文件并行加载 查看引起加载的 CSS 代码文件，是否看到 @import 声明 思考为什么 @import 会导致 CSS 文件的串行加载 修改 index.html 文件，给每个 CSS 文件添加一个 标签 修改 CSS 文件，删除 @import 语句 运行 wd03 网站，npx http-server wd03 打开 Network 面板，在快速 3G 网络限流的条件下，过滤查看所有 CSS 文件的加载过程 是否看到 CSS 文件加载的方式，是否还有串行加载的现象？ 这种串行加载是什么导致的？ head-link vs body-link 操作步骤如下： 运行 wd01 网站，npx http-server wd01 打开 Network 面板，设置快速 3G 网络限流 在 Performance 面板，开启加载性能评测 把 Summary 中各部分时间汇总信息截图 修改 wd01 网站的 index.html 页面，把 CSS 样式表代码移到 标签的底部 标签的前面 运行 wd01 网站，npx http-server wd01 在 Performance 面板，再次开启加载性能评测 观察浏览器页面是否出现无样式内容闪烁现象 把 Summary 中各部分时间汇总信息截图 跟上一次的 Summary 数据比对，渲染和绘制时间是否有区别 思考什么原因导致 的渲染和绘制时间增加？ 简单的过渡动画 操作步骤如下： 创建文件夹 wd04，添加 index.html 和 styles.css 页面上显示一个 150 X 150 像素的颜色方块 当鼠标点击此方块时，利用过渡效果将方块变成圆，并向下移动 200px 运行该页面验证程序的功能，npx http-server wd04 过渡动画 vs jQuery 动画 操作步骤如下： 复制 wd01 文件夹为 transition，cp -r wd01 transition 修改 css/styles.css 代码和 js/behaviors.js 使用过渡动画实现预约对话框的弹出 启动修改后的网站，npx http-server transition 用 Performance 面板对预约对话框的弹出做性能测试 查看 Summary 中的各个阶段的耗时，截图保存 启用修改之前的网站，npx http-server wd01 用 Performance 面板对预约对话框的弹出做性能测试 查看 Summary 中的各个阶段的耗时 两个版本在渲染和绘制上耗时有什么差别？ jQuery 动画除了渲染和绘制耗时长，另外，还有布局抖动的问题 transition 版本的代码中也存在布局抖动的问题，思考问题处在哪里 延迟加载非关键 CSS 操作步骤如下： 启动 wd05 网站，npx http-server wd05 打开 Devtools 的 Performance 面板，评测网站的性能 在跟踪信息中，观察 FCP 和 CSS 完成加载在时间轴上的位置关系 思考这是什么现象？ 打开 Coverage 工具，重新加载页面 在 Coverage 工具中，查看 style.css 的关键样式 关键样式和非关键样式的比例如何？（蓝色的为关键样式，红色的为非关键样式） 到底哪些代码是关键样式呢？点击 Coverage 中的 style.css 会打开 Source 面板，在代码左侧有蓝条和红条，标识出到底哪些代码是关键样式代码，哪些代码是非关键样式代码 下面操作会根据 Source 面板的内容，将关键样式代码内联到 index.html 中，并将非关键样式代码延迟加载 复制 wd05 网站，cp -r wd05 critical-css 打开 index.html 文件，添加 style 标签将关键 CSS 代码内联 编辑 index.html 文件的 link 标签，将 style.css 延迟加载 编辑 style.css 文件，删除关键样式代码 启动 critical-css 网站 打开 Devtools 的 Performance 面板，评测网站的性能 在跟踪信息中，观察 FCP 和 CSS 完成加载在时间轴上的位置关系 2018 -  by 王顶. All rights reserved.本站访客人数  人次document.getElementsByClassName(\"bsz-this-year\")[0].innerHTML = new Date().getFullYear(); window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"086e21b153d1d4f035be\",\"clientSecret\":\"62086ccd1d88050f3f9d4fe2124844dcfaac8ba6\",\"repo\":\"spa\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"SPA\"],\"id\":\"/chapters/ch03-opt-css.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"086e21b153d1d4f035be\",\"clientSecret\":\"62086ccd1d88050f3f9d4fe2124844dcfaac8ba6\",\"repo\":\"spa\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"SPA\"],\"id\":\"/chapters/ch03-opt-css.html\"});gitalk.render(\"gitalk-container\"); "},"chapters/ch04-opt-image.html":{"url":"chapters/ch04-opt-image.html","title":"第四章：优化图片","keywords":"","body":"第 4 章：优化图片 阅读参考资料 选择正确的图片格式 选择正确的压缩级别 使用 Imagemin 压缩图像 用视频替换 GIF 动画以加快页面加载 提供响应式图像 提供尺寸正确的图像 使用 WebP 图像 使用图像 CDN 优化图像 使用延迟加载提高加载速度 延迟加载图像 延迟加载视频 浏览器内置图像延迟加载 使用 lazysizes 延迟加载图像 选择合适的图片格式 操作步骤如下： 启动网站 wd06，npx http-server wd06 用 Lighthouse 对网站 wd06 做桌面性能评测 查看 Lighthouse 的优化建议，是否有 Serve images in next-gen formats 复制 wd06 文件夹，cp -r wd06 image-format && cd image-format 根据优化建议详情，修改两个图片的格式，把 flower_photo.jpg 改成 webp 格式，把 flower_logo.png 改成 svg 格式 全局安装 cwebp，npm i -g cwebp 用 cwebp 做图片格式转换，cwebp flower_photo.jpg -o flower_photo.webp 检查 webp 和 jpg 格式的图片文件大小的差异，ls -lh 用 IMG2GO 将 flower_photo.png 转换成 svg 格式 检查 svg 和 jpg 格式的图片文件大小的差异，ls -lh 用 svgo 压缩 SVG 图片，npx svgo flower_logo.svg -o flower_logo.min.svg 观察压缩前后 SVG 图片尺寸的变化，ls -al *.svg 思考 SVG 尺寸变化背后的原因 修改 index.html 文件，使用两个新格式的图片 启动网站 image-format，npx http-server image-format 用 Lighthouse 对 image-format 网站做桌面性能评测 查看 Lighthouse 的优化建议，是否有 Serve images in next-gen formats 使用正确的图片尺寸 操作步骤如下： 启动网站 wd06，npx http-server wd06 用 Lighthouse 对网站 wd06 做桌面性能评测 查看 Lighthouse 的优化建议，是否有 Properly size images 复制 wd06 文件夹，cp -r wd06 image-dimensions && cd image-dimensions 检查 Elements 面板，查看 flower_logo.png 的 CSS 宽高属性 检查 flower_logo.png 图片的宽高属性，flower_logo.png 图片是否发生了缩放 安装 ImageMagic 工具，sudo yum install -y ImageMagick 调整图片 flower_logo.png 的尺寸，convert flower_logo.png -resize 50x50 flower_logo_50x50.png 修改 index.html 代码，使用修改后的图片 启动网站 image-dimensions，npx http-server image-dimensions 用 Lighthouse 对 image-dimensions 网站做桌面性能评测 查看 Lighthouse 的优化建议，是否有 Properly size images 思考为什么不调整 flower_photo.jpg 的尺寸 响应式图片 操作步骤如下： 启动网站 wd07，npx http-server wd07 用 Lighthouse 对网站 wd07 做桌面性能评测 查看 Lighthouse 的优化建议，是否有 Properly size images 复制网站 wd07，cp -r wd07 response && cd response 针对 flower_photo 图片实现多种屏幕尺寸的支持（宽度：720px，1080px） 用 ImageMagic 工具，生成多种图片尺寸 使用三种不同的方案实现响应式图片，CSS 媒体查询， 和 启动网站 response, npx http-server response 用 Lighthouse 对网站 wd07 做桌面性能评测 查看 Lighthouse 的优化建议，是否有 Properly size images 调整设备尺寸，刷新页面，通过 Network 面板，查看不同图片资源的加载 把 GIF 动画转换为视频 操作步骤如下： 启动网站 wd08，npx http-server wd08 用 Lighthouse 对网站 wd08 做桌面性能评测 查看 Lighthouse 的优化建议，是否有 Use video formats for animated content 复制 wd08 文件夹，cp -r wd08 gif2mp4 && cd gif2mp4 安装 ffmpeg 工具：sudo yum install -y epel-release sudo rpm -v --import http://li.nux.ro/download/nux/RPM-GPG-KEY-nux.ro sudo rpm -Uvh http://li.nux.ro/download/nux/dextop/el7/x86_64/nux-dextop-release-0-5.el7.nux.noarch.rpm sudo yum install -y ffmpeg 检查 ffmpeg 工具是否正常工作，ffmpeg -version 转换 GIF 动画为 MP4，ffmpeg -i cat-herd.gif -vf \"crop=trunc(iw/2)*2:trunc(ih/2)*2\" -b:v 0 -crf 25 -f mp4 -vcodec libx264 -pix_fmt yuv420p cat-herd.mp4 检查文件大小，ls -lh 修改 index.html 文件，使用 video 标签播放视频，删除 img 标签 注意：video 标签需要支持自动播放，循环播放和静音功能 启动网站 gif2mp4，npx http-server gif2mp4 用 Lighthouse 对网站 gif2mp4 做桌面性能评测 查看 Lighthouse 的优化建议，是否有 Use video formats for animated content 延迟加载图片 操作步骤如下： 启动网站 wd09，npx http-server wd09 用 Network 面板对网站 wd09 做性能评测 通过瀑布图，观察页面上图片加载的过程 记录页面加载完成的两个时间：DCL 和 Load 复制 wd09 文件夹，cp -r wd09 image-loading-lazy && cd image-loading-lazy 修改 index.html 文件，在所有 标签中（除了前两个）添加属性 loading='lazy' 启动网站 image-loading-lazy，npx http-server image-loading-lazy 用 Network 面板对网站 image-loading-lazy 做性能评测 通过瀑布图，观察页面上图片加载的过程 记录页面加载完成的两个时间：DCL 和 Load，跟优化前比较页面加载速度 向下翻页观察 Network 面板图片延迟加载的效果 用 lazysizes 延迟加载图片 操作步骤如下： 启动网站 wd10，npx http-server wd10 用 Network 面板对网站 wd10 做性能评测，设置网络节流慢速 3G 观察瀑布图，分析页面的五个图片是否延迟加载，记录 DCL 和 Load 两个时间 复制 wd10 文件夹，cp -r wd10 lazysizes && cd lazysizes 修改 index.html 文件，使用 lazysizes 实现非首屏图片的延迟加载 启动网站 lazysizes，npx http-server lazysizes 用 Network 面板对网站 lazysizes 做性能评测 观察瀑布图，分析页面的五个图片是否延迟加载，记录 DCL 和 Load 两个时间 分析优化后跟优化前 DCL 和 Load 有什么区别，为什么 骨架屏 操作步骤如下： 启动网站 wd09，npx http-server wd09 用 Network 面板对网站 wd09 做性能评测 通过瀑布图，观察页面上图片加载的过程 记录页面加载完成的两个时间：DCL 和 Load 复制 wd09 文件夹，cp -r wd09 skeleton && cd skeleton 修改 index.html 文件，给 img 添加 CSS 样式 background-color: lightgray; 启动网站 skeleton，npx http-server skeleton 用 Network 面板对网站 skeleton 做性能评测 通过瀑布图，观察页面上图片加载的过程 向下翻页骨架屏的效果 渐进式 JPEG 操作步骤如下： 启动网站 wd11，npx http-server wd11 在 Network 面板设置网络限流：慢速 3G 刷新页面，观察图片加载的过程 复制 wd11 文件夹，cp -r wd11 progressive-jpg && cd progressive-jpg 用 ImageMagic 工具生成渐进式 JPEG，convert 6.jpg -interlace Plane 7.jpg 修改 index.html 使用 7.jpg 启动网站 progressive-jpg，npx http-server progressive-jpg 刷新页面，观察图片加载的过程 雪碧图 操作步骤如下： 启动网站 wd12，npx http-server wd12 在 Network 面板设置网络限流：慢速 3G 刷新页面，观察图片加载的过程，结合页面内容，是否观察到 6 个图标文件 复制 wd12 文件夹，cp -r wd12 sprite && cd sprite 用 svg-sprite 工具生成 SVG 雪碧图，npx svg-sprite --css --css-render-less --css-dest=less --css-sprite=../img/icons.svg --css-layout=diagonal img/icon-images/*.svg 查看新生成的 LESS 文件：sprite.less 和生成的雪碧图：icons.svg，ls less img 查看 sprite.less 文件内容，cat less/sprite.less 修改 main.less 和 global_small.less 使用雪碧图 运行构建脚本将 LESS 代码转成 CSS 代码，./less.sh 启动网站 sprite，npx http-server sprite 刷新页面，观察图片加载的过程 综合案例 操作步骤如下： 一位毕业生咨询的项目情况如下： 当时用网络面板对网站的性能评测如下图所示： 网站地址：https://www.yunyingfile.com/ 目前该网站已经做了一些调整和优化 请思考并回答以下问题： 现在的网站性能还存在哪些问题？应该如何改进？ 之前的网站性能有哪些问题？应该如何改进？ 2018 -  by 王顶. All rights reserved.本站访客人数  人次document.getElementsByClassName(\"bsz-this-year\")[0].innerHTML = new Date().getFullYear(); window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"086e21b153d1d4f035be\",\"clientSecret\":\"62086ccd1d88050f3f9d4fe2124844dcfaac8ba6\",\"repo\":\"spa\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"SPA\"],\"id\":\"/chapters/ch04-opt-image.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"086e21b153d1d4f035be\",\"clientSecret\":\"62086ccd1d88050f3f9d4fe2124844dcfaac8ba6\",\"repo\":\"spa\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"SPA\"],\"id\":\"/chapters/ch04-opt-image.html\"});gitalk.render(\"gitalk-container\"); "},"chapters/ch05-opt-font.html":{"url":"chapters/ch05-opt-font.html","title":"第五章：优化字体","keywords":"","body":"第 5 章：优化字体 阅读参考资料 在字体加载期间避免不可见的文本 优化 WebFont 加载和呈现 减小 WebFont 大小 使用 Webfont 操作步骤如下： 启动网站 wd13，npx http-server wd13 思考页面使用何种字体 修改 index.html，在网站页面中使用 liguofu.ttf 字体 查看改后的网站页面，其中文字是否为手写体 压缩字体 安装字体转换工具，npm install 将 TTF 格式字体转换成 WOFF 格式，npx ttf2woff liguofu.ttf liguofu.woff 比较 TTF 格式和 WOFF 格式字体文件的尺寸，ls -lh 修改 index.html，在网站页面中使用 WOFF 字体 查看改后的网站页面，其中文字是否为手写体 将 TTF 格式字体转换成 WOFF2 格式，cat liguofu.ttf | npx ttf2woff2 >> liguofu.woff2 比较 TTF 格式、WOFF 格式和 WOFF2 格式字体文件的尺寸，ls -lh 修改 index.html，在网站页面中使用 WOFF2 字体 查看改后的网站页面，其中文字是否为手写体 观察 FOIT 和 FOUT 现象 在 wd13 网站中使用 WOFF 字体，确保页面中的文字是手写体 修改 index.html，在 @font-face 代码段中添加 font-display: block; 属性 启动 wd13 网站，npx http-server wd13 在 Network 面板设置网络限流 Fast 3G 和 Capture screenshots，刷新页面 观察是否出现 FOIT 现象 修改 index.html，在 @font-face 代码段中添加 font-display: swap; 属性 刷新网站，观察是否出现 FOUT 现象 取字体子集 操作步骤如下： 启动网站 wd14，npx http-server wd14 用 Network 对网站 wd14 做桌面性能评测 查看瀑布流图，是否看到 fontawesome-webfont.woff 字体文件的加载 在样式表文件中定位该字体文件，了解该字体文件在网站中的作用 查看并记录该字体文件的体积，ls -al font 其实网站上只使用了该字体文件中的五个字符，而加载整个字体文件得不偿失 另外，观察 picture.css 文件中定义的各种 iconXX 样式，用到也只有五个 复制 wd14 文件夹，cp -r wd14 font-opt && cd font-opt 首先，删除 picture.css 文件中无用的 iconXX 定义，确保网站样式正常 比较，优化前后 CSS 文件的大小差异 安装 fonttools，sudo pip3 install fonttools 创建字体子集，pyftsubset fontawesome-webfont.woff --unicodes=f0ac,f085,f0c3,f029,f164 检查字体子集文件大小，ls -al 修改字体子集文件名为源字体文件名 启动网站 font-opt，npx http-server font-opt 用 Network 对网站 font-opt 做桌面性能评测 查看瀑布流图，观察 fontawesome-webfont.woff 文件的字节数 2018 -  by 王顶. All rights reserved.本站访客人数  人次document.getElementsByClassName(\"bsz-this-year\")[0].innerHTML = new Date().getFullYear(); window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"086e21b153d1d4f035be\",\"clientSecret\":\"62086ccd1d88050f3f9d4fe2124844dcfaac8ba6\",\"repo\":\"spa\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"SPA\"],\"id\":\"/chapters/ch05-opt-font.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"086e21b153d1d4f035be\",\"clientSecret\":\"62086ccd1d88050f3f9d4fe2124844dcfaac8ba6\",\"repo\":\"spa\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"SPA\"],\"id\":\"/chapters/ch05-opt-font.html\"});gitalk.render(\"gitalk-container\"); "},"chapters/ch06-opt-javascript.html":{"url":"chapters/ch06-opt-javascript.html","title":"第六章：优化 JavaScript","keywords":"","body":"第 6 章：优化 JavaScript 参考资料 使用 PRPL 模式实现即时加载 通过代码拆分减少 JavaScript 负载 删除未使用的代码 缩小和压缩网络有效负载 为现代浏览器提供现代代码以加快页面加载速度 发布、传输和安装现代 JavaScript 以实现更快的应用程序 CommonJS 如何让您的捆绑包变得更大 第三方 JavaScript 性能 识别慢速第三方 JavaScript 高效加载第三方 JavaScript 使用 Web Workers 消除渲染阻塞 操作步骤如下： 启动网站 wd15，npx http-server wd15 Chrome 浏览器打开 devtools 的 console 面板 输入 wd15 网站地址，观察浏览器页面的变化 观察页面上有文字出现时，console 面板打印的时长信息 查看 wd15 网站代码，思考为什么页面的文字出现会等待很长时间 修改 index.html 页面，将 代码放到 的最下面 重新启动 wd15，观察网站页面的变化以及 console 面板的时长信息 在 开始标签中添加 defer 布尔属性 重新启动 wd15，观察网站页面的变化以及 console 面板的时长信息 思考 javascript 代码对页面渲染的阻塞效果 动画 jank 操作步骤如下： 启动网站 wd04, npx http-server wd04 Chrome 浏览器打开 devtools 的 Performance 面板，停靠在右侧 点击 Performance 面板的 Record 按钮，然后点击页面上的方块 当方块运动到页面下方时，停止 Record 在 Performance 面板中观察动画的 FPS 信息，思考动画是否发生 jank 复制 wd04 代码为 jank，cp -r wd04 jank && cd jank 把 wd15 下的 calc.js 复制到 jank 目录下 修改 calc.js，只保留 fb 函数的声明，其余代码注释掉 修改 index.html，引入 calc.js 代码，并在 click 事件中，调用 fb(44) 保存代码，启动 jank 网站 重复前面的操作，观察 jank 网站动画的 FPS，思考动画是否发生 jank 思考动画发生 jank 的原因 Webworker 操作步骤如下： 复制 jank 网站为 webworker，cp -r jank webworker && cd webworker 修改 calc.js 代码，启用注释的代码 修改 index.html，去掉 calc.js 代码的引入 修改 onclick 事件响应代码，在 onclick 事件中，创建 fb webworker 线程 保存代码，启动 webworker 网站 使用 Performance 面板，观察动画的 FPS，思考动画是否发生 jank 观察 Webworker 线程的执行和主线程的关系 批量操作 DOM 操作步骤如下： 运行网站 wd16，npx http-server wd16 Chorme 浏览器打开 devtools 的 console 面板，停靠在右侧 访问 wd16 网站，在 console 面板，执行下面的代码，进行基准测试 // 单独创建 dom genDom1(10000); // 批量创建 dom genDom2(10000); m1 测试后，刷新页面，测试 m2 每次测试后，记录 console 面板的数据 总共测试三轮 根据测试数据，思考哪种创建 DOM 的方式性能更好 查看 wd16 代码，掌握批量创建 DOM 的代码编写思路 编辑 app.js 取消 genDom2(1000) 代码的注释 访问 wd16 网站，在 console 面板，执行下面的代码，进行基准测试 // 单独修改 dom changeDom1(); // 批量修改 dom，实际是批量创建 dom changeDom2(1000); m1 测试后，刷新页面，测试 m2 每次测试后，记录 console 面板的数据 总共测试三轮 根据测试数据，思考哪种修改 DOM 的方式性能更好 访问 wd16 网站的 react.html 页面 刷新三次，记录 console 面板的数据 跟上面 m1 和 m2 的数据比对 2018 -  by 王顶. All rights reserved.本站访客人数  人次document.getElementsByClassName(\"bsz-this-year\")[0].innerHTML = new Date().getFullYear(); window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"086e21b153d1d4f035be\",\"clientSecret\":\"62086ccd1d88050f3f9d4fe2124844dcfaac8ba6\",\"repo\":\"spa\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"SPA\"],\"id\":\"/chapters/ch06-opt-javascript.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"086e21b153d1d4f035be\",\"clientSecret\":\"62086ccd1d88050f3f9d4fe2124844dcfaac8ba6\",\"repo\":\"spa\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"SPA\"],\"id\":\"/chapters/ch06-opt-javascript.html\"});gitalk.render(\"gitalk-container\"); "},"chapters/ch07-opt-others.html":{"url":"chapters/ch07-opt-others.html","title":"第七章：其他","keywords":"","body":"第 8 章：其他 阅读参考资料 内容分发网络 CDN 是什么？ HTTP2 是什么？ HTTP cache Web 缓存系列 HTTP/2.0 操作步骤如下： 对以下三个网站，用 Chrome 浏览器 devtools 的 Network 面板做性能测评 HTTP/1.0 网站：https://h0.adamliu.net/ HTTP/1.1 网站：https://h1.adamliu.net/ HTTP/2.0 网站：https://h2.adamliu.net/ 在 Network 面板验证三个网站的 HTTP 协议的版本 对比三个网站：总请求数量，请求的资源大小，传输数据的大小，消耗的时长 查看 h0 网站的 ConnectionID，ConnectionID 是否各不相同？说明什么问题？ 查看 h1 网站的 ConnectionID，ConnectionID 是否各不相同？说明什么问题？ 查看 h2 网站的 ConnectionID，ConnectionID 是否各不相同？说明什么问题？ Nginx 实现 HTTP/2.0 操作步骤如下： 在 wpo-demo 目录下创建 Key 文件夹，mkdir key && cd key 在 key 文件夹下生成自签名证书，openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout selfsigned.key -out selfsigned.crt 注意，生成证书的过程，需要提供一些证书的信息，每个字段尽量不要为空 启动 Nginx 容器 docker stop `docker ps -aq` docker rm `docker ps -aq` docker run -d \\ --name web \\ -p 8080:80 \\ -p 8888:443 \\ -v :/usr/share/nginx/html \\ -v :/key \\ nginx:alpine docker ps -a 浏览器访问：http://:8080，出现 B 站图标，Network 面板有 530 个请求，说明网站挂载正常 交互模式连接 nginx 容器，docker exec -it web /bin/sh 检查 key 目录下的证书，ls /key，如果有两个证书文件，说明证书目录挂载正常 修改 Nginx 配置文件，vi /etc/nginx/conf.d/default.conf 添加 SSL 证书配置和 HTTP2 的配置 listen 443 ssl http2; server_name localhost; ssl_certificate /key/selfsigned.crt; ssl_certificate_key /key/selfsigned.key; 保存配置文件，重新加载 Nginx 配置文件，nginx -s reload 浏览器访问：https://:8888 Network 面板检查 HTTP 协议版本，以及连接的数量 用 Koa 框架实现 HTTP/2.0 操作步骤如下： 确认 koa2 可用，koa2 --help 如果命令找不到，安装 koa-generator，npm i -g koa-generator 否则，跳过上面的安装步骤 创建 wd18 koa 脚手架项目，koa2 -e wd18 && cd wd18 安装项目依赖，npm i 运行 wd18，npm start 浏览器访问 wd18，通过 Network 面板，确认 HTTP 协议版本 创建证书文件夹，mkdir key && cd key 创建自签名证书，注意，给证书提供一些有用信息 openssl genrsa 1024 > key.pem openssl req -x509 -new -key key.pem > key-cert.pem 修改 wd18 项目代码，vi bin/www // 原代码 var http = require('http'); // 改为 const http = require('http2'); const fs = require('fs'); // 原代码 var server = http.createServer(app.callback()); // 改为 const server = http.createSecureServer({ key: fs.readFileSync('./key/key.pem'), cert: fs.readFileSync('./key/key-cert.pem') }, app.callback()); 保存代码，运行网站，npm start 浏览器访问 wd18，通过 Network 面板，确认 HTTP 协议版本 把 wd17 目录内容复制到 wd18，`cp -r wd17/* wd18/public/ 浏览器访问 wd18 HTTP 缓存 操作步骤如下： 完善 wd19 项目，首先实现强制缓存 通过 Network 面板，检查缓存的效果 实现协商缓存，用 Network 面板，检查缓存效果 2018 -  by 王顶. All rights reserved.本站访客人数  人次document.getElementsByClassName(\"bsz-this-year\")[0].innerHTML = new Date().getFullYear(); window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"086e21b153d1d4f035be\",\"clientSecret\":\"62086ccd1d88050f3f9d4fe2124844dcfaac8ba6\",\"repo\":\"spa\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"SPA\"],\"id\":\"/chapters/ch07-opt-others.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"086e21b153d1d4f035be\",\"clientSecret\":\"62086ccd1d88050f3f9d4fe2124844dcfaac8ba6\",\"repo\":\"spa\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"SPA\"],\"id\":\"/chapters/ch07-opt-others.html\"});gitalk.render(\"gitalk-container\"); "},"chapters/ch02-build-automation.html":{"url":"chapters/ch02-build-automation.html","title":"第一章：自动化构建","keywords":"","body":"第 1 章：自动化构建 阅读参考资料 持续集成 webpack 官网 gogs 官网 drone 官网 搭建 gogs + drone 持续集成环境 参考：搭建 gogs + drone 持续集成环境 手动构建电子书 要求： 在 gogs 上创建电子书仓库 ebook 克隆 ebook 仓库 在 ebook 目录下，添加四个 MarkDown 文档，分别是： README.md, ch01.md, ch02.md 和 SUMMARY.md 确定当前 node.js 版本为 v10，nvm use 10 全局安装 gitbook 工具，npm i -g gitbook-cli && gitbook --version 在 ebook 目录下构建电子书，gitbook build 检查 ebook 目录下生成的 _book 目录，tree _book 在 ebook 目录下运行 browsersync 启动静态文件服务 用浏览器访问该电子书 修改电子书的内容，重新构建电子书，检查浏览器中的电子书内容 停止 browsersync 的运行 在 ebook 目录下添加 Dockerfile，Dockerfile 的代码如下： FROM nginx:alpine COPY _book /usr/share/nginx/html/ EXPOSE 80 将电子书构建成 Docker 镜像，docker build . -t ebook-img:latest --rm=true 运行刚构建好的镜像，docker run -d --name ebook -p 8080:80 ebook-img:latest 用 Chrome 浏览器查看在线电子书 示例参考： 在线实验手册 在线实验手册仓库 自动构建电子书 要求： 登录 drone 网站，启动 demo 仓库的自动化构建 在 ebook 目录下，添加 .drone.yml 自动化构建脚本文件，代码如下： kind: pipeline name: default steps: - name: build gitbook image: node:10.23.3-alpine3.11 commands: - npm config set registry https://registry.npm.taobao.org - npm i -g gitbook-cli - gitbook build - name: build docker image image: docker:dind volumes: - name: dockersock path: /var/run/docker.sock commands: - ./clean.sh - docker build . -t ebook-img:latest --rm=true - docker run -d -p 8080:80 --name=ebook ebook-img:latest volumes: - name: dockersock host: path: /var/run/docker.sock 在 ebook 目录下，添加 clean.sh 脚本文件，并给 clean.sh 脚本执行权限 clean.sh 脚本，执行环境清理任务，脚本代码如下： #!/bin/sh id=$(docker ps --filter \"name=ebook\" -q) if [ ! -z \"$id\" ]; then docker stop ebook docker rm ebook docker rmi ebook-img fi 提交代码到 ebook 仓库，推送 ebook 仓库至 gogs 浏览 drone 网站，查看自动化构建的输出 用 Chrome 浏览器查看自动构建后的电子书 矩形计算器 v0.1 要求： 在 BitBucket 上创建 rectangle 项目仓库 根据输入的矩形的长度和宽度计算矩形的周长和面积 使用 H5 内置控件实现 解决浮点舍入误差的问题 不用考虑数据合法性校验 支持科学计数法的数据计算 将代码推送到 BitBucket 将代码发布到七牛云的对象存储中 示例参考： 矩形计算器 HTML 静态代码检查 要求： 在 BitBucket 上创建 build-automation 项目仓库 阅读 htmlhint 规则文档 在 build-automation 仓库，创建 01-htmlhint 文件夹 在 01-htmlhint 文件夹中，复制 rectangle 仓库的 index.html、rectangle.css 和 rectangle.js 三个代码文件 添加 .htmlhintrc 配置文件，wget https://sample.wangding.co/spa/htmlhintrc && mv htmlhintrc .htmlhintrc npm 安装 htmlhint 插件 执行 npm test，实现 HTML 代码静态代码检查 执行自动化任务，观察自动化构建执行的效果 提交代码到 BitBucket 示例参考： HTML 静态代码检查 CSS 静态代码检查 要求： 阅读 csslint 规则文档 在 build-automation 仓库，创建 02-csslint 文件夹 在 02-csslint 文件夹中，复制 rectangle 仓库的 index.html、rectangle.css 和 rectangle.js 三个代码文件 添加 .csslintrc 配置文件，wget https://sample.wangding.co/spa/csslintrc && mv csslintrc .csslintrc npm 安装 csslint 插件 执行 npm test，实现 CSS 代码静态代码检查 执行自动化任务，观察自动化构建执行的效果 提交代码到 BitBucket 示例参考： CSS 静态代码检查 JavaScript 静态代码检查 要求： 阅读 eslint 规则文档 在 build-automation 仓库，创建 03-eslint 文件夹 在 03-eslint 文件夹中，复制 rectangle 仓库的 index.html、rectangle.css 和 rectangle.js 三个代码文件 添加 .eslintrc.json 配置文件，wget https://sample.wangding.co/spa/eslintrc.json && mv eslintrc.json .eslintrc.json npm 安装 eslint 插件 执行 npm test，实现 JavaScript 代码静态代码检查 执行自动化任务，观察自动化构建执行的效果 提交代码到 BitBucket 示例参考： JavaScript 静态代码检查 矩形计算器 v0.2 要求： 完善 rectangle 项目 添加 drone.yml 构建脚本，当推送 rectangle 到 gogs 仓库时，执行以下自动化构建任务 对 HTML、CSS 和 JavaScript 静态代码检查 静态代码检查通过后，将 rectangle 构建成基于 Nginx 的镜像 运行该镜像，暴露到宿主机的 8080 端口 查看构建好的镜像 查看 rectangle 容器 查看 drone 构建服务器的构建日志 Chrome 浏览器，访问 rectangle 应用 示例参考： 矩形计算器 v0.2 代码静态检查 阅读参考资料 单元测试准则 JavaScript 与 QA 工程师（理论篇） Jest 官网 Jest 中文 单元测试 要求： 在 build-automation 仓库，创建 04-unit-test 文件夹 创建被测模块 add.js，被测模块暴露出 add 方法，实现 z = x + y 对 add.js 模块，编写单元测试脚本 运行 npm test，执行单元测试 查看单元测试输出结果 进行代码覆盖率测试 查看代码覆盖率报告 把单元测试脚本改成动态测试 示例参考： 单元测试 entropy 的单元测试 要求： 在 build-automation 仓库，创建 05-entropy 文件夹 获取 entropy.js 被测程序 entropy 程序的功能描述，请参考 Node.js 大作业 重构 entropy.js 代码，使其易于实施单元测试 添加单元测试代码 运行单元测试，查看单元测试输出结果 查看代码覆盖率报告 示例参考： entropy 的单元测试 接口测试 要求： 在 build-automation 仓库，创建 06-api-test 文件夹 添加 app.js 脚本代码，实现矩形计算器的 HTTP API 接口 接口规格如下： // request GET /rectangle?width=20&height=20 // response {'code': 200, 'reason': '查询成功', result: {'area': 400, 'perimeter': 80}} 手工测试该接口 添加接口自动化测本代码 运行 npm test，观察接口测试的效果 对接口实现自动化测试 示例参考： HTTP 接口测试 消除依赖 要求： 在 build-automation 仓库，创建 07-mock 文件夹 获取 password-rules.js，wget https://sample.wangding.co/spa/password-rules.js 获取 password-verify.js，wget https://sample.wangding.co/spa/password-verify.js 在 password-rules.js 中添加一个密码长度不少于 6 位的验证规则 为 password-rules.js 添加单元测试代码 为 password-verifier.js 添加单元测试代码，消除 password-rules.js 的依赖 运行单元测试，查看单元测试输出结果 示例参考： 消除依赖 矩形计算器 v0.3 要求： 切换到 rectangle 项目仓库 重构 rectangle.js 代码，使其易于实施单元测试 编写自动化测试脚本 运行 npm test，先做静态代码检查，再做单元测试 将代码仓库推送 gogs，用 drone 实现自动化构建 浏览器访问，构建好的 rectangle 容器 检查 drone 构建日志 示例参考： 矩形计算器 v0.3 单元测试 矩形计算器 v0.4 要求： 切换到 rectangle 项目仓库 编写 webpack.config.js，对 HTML、CSS 和 JavaScript 代码进行压缩 将代码压缩构建任务编写到 .drone.yml 配置脚本中 推送修改的代码到 gogs 仓库 观察 drone 服务器上的自动化构建日志 用 chrome 浏览器查看自动化构建并发布的 rectangle 应用 验证应用代码是压缩后的代码 示例参考： 矩形计算器 v0.4 实现代码压缩发布 矩形计算器 v0.5 要求： 添加页面初始焦点，初始焦点设置为第一个文本框 设备自适应，页面在手机上可以正常显示 增加必填字段的提示 不用考虑数据合法性校验 示例参考： 矩形计算器 v0.5 增强用户体验 2018 -  by 王顶. All rights reserved.本站访客人数  人次document.getElementsByClassName(\"bsz-this-year\")[0].innerHTML = new Date().getFullYear(); window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"086e21b153d1d4f035be\",\"clientSecret\":\"62086ccd1d88050f3f9d4fe2124844dcfaac8ba6\",\"repo\":\"spa\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"SPA\"],\"id\":\"/chapters/ch02-build-automation.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"086e21b153d1d4f035be\",\"clientSecret\":\"62086ccd1d88050f3f9d4fe2124844dcfaac8ba6\",\"repo\":\"spa\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"SPA\"],\"id\":\"/chapters/ch02-build-automation.html\"});gitalk.render(\"gitalk-container\"); "},"chapters/ch03-ui-introduction.html":{"url":"chapters/ch03-ui-introduction.html","title":"第二章：UI 概述","keywords":"","body":"第 2 章：UI 概述 阅读参考资料 如何为桌面应用程序设计更好的用户体验 简洁明了的优秀 UI 设计原则：第一篇、第二篇、第三篇、第四篇 九张图回顾 Web 设计的 25 年历史 打造出色 UI 的七个法则：上篇、下篇 改善UI视觉体验的7个小技巧 不规则窗体案例 界面视觉设计要素：字体篇 色彩背后的心理学 人类是如何认知颜色的 小图标大学问 UI 设计原则 UI 设计原则 2018 -  by 王顶. All rights reserved.本站访客人数  人次document.getElementsByClassName(\"bsz-this-year\")[0].innerHTML = new Date().getFullYear(); window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"086e21b153d1d4f035be\",\"clientSecret\":\"62086ccd1d88050f3f9d4fe2124844dcfaac8ba6\",\"repo\":\"spa\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"SPA\"],\"id\":\"/chapters/ch03-ui-introduction.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"086e21b153d1d4f035be\",\"clientSecret\":\"62086ccd1d88050f3f9d4fe2124844dcfaac8ba6\",\"repo\":\"spa\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"SPA\"],\"id\":\"/chapters/ch03-ui-introduction.html\"});gitalk.render(\"gitalk-container\"); "},"chapters/ch04-h5-buildin-widget.html":{"url":"chapters/ch04-h5-buildin-widget.html","title":"第三章：H5 内置控件","keywords":"","body":"第 3 章：H5 内置控件 阅读参考资料 文本框类 text textarea email tel password number search url 按钮类 button button image checkbox radio reset submit 弹框类 alert() prompt() confirm() 列表类 select option optgroup datalist option 时间日期类 time date month week datetime datetime-local 其他 label range progress color file hidden form fieldset legend output 作业统一说明 如果没有特别说明，后续任务代码放到 spa 仓库下 spa 仓库需要同步到 bitbucket 远程仓库和 gogs 远程仓库 spa 仓库需要用 webpack 进行自动化构建 实现 HTML、CSS、JavaScript 静态代码检查构建任务 实现 HTML、CSS、JavaScript 压缩构建任务 如有必要，添加单元测试构建任务 使用 drone 自动发布代码为 docker 镜像 定时器按钮 基本要求： 创建 01-timer-button 目录 使用 H5 内置控件实现 按钮初始状态为禁用 禁用状态下，点击按钮，不会有任何响应 倒计时 6 秒 每隔一秒按钮文字显示剩余秒数 倒计时结束后，按钮状态为启用 启用状态下，点击按钮，会弹出 alert 弹框 示例参考： 定时器按钮 密码可见 基本要求： 创建 02-password-visual 目录 使用 H5 内置控件实现 在文本框中输入任意字符，并不显示输入的字符，而显示为“点”（隐藏密码） 文本框的右侧有眼睛闭合的图标 当鼠标移到眼睛图标时 密码框中的密码可以正常显示 眼睛关闭的图标变成眼睛睁开的图标 当鼠标移出眼睛图标时 密码框中的密码不可见 眼睛睁开的图标变成眼睛闭合的图标 密码框设置为初始焦点 示例参考： 密码可见 滑杆 基本要求： 创建 03-range 目录 使用 H5 内置控件实现 用滑杆控件输入自己的年龄，滑杆的最小值为 0，最大值为 100 滑块拖动后，下方显示年龄数据 初始滑块位于最左边，下方的年龄数据为 0 岁 示例参考： 范围控件 进度条 基本要求： 创建 04-progress 目录 使用 H5 内置控件实现 用进度条控件模拟下载文件的进度 进度条控件下方有三个按钮：开始、暂停和重置 开始按钮点击后，进度条显示下载进度 暂停按钮点击后，下载进度暂停 重置按钮点击后，下载进度条恢复初始状态 多次点击开始按钮，点击一次暂停按钮，要求进度条能够暂停 示例参考： 进度条 2018 -  by 王顶. All rights reserved.本站访客人数  人次document.getElementsByClassName(\"bsz-this-year\")[0].innerHTML = new Date().getFullYear(); window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"086e21b153d1d4f035be\",\"clientSecret\":\"62086ccd1d88050f3f9d4fe2124844dcfaac8ba6\",\"repo\":\"spa\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"SPA\"],\"id\":\"/chapters/ch04-h5-buildin-widget.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"086e21b153d1d4f035be\",\"clientSecret\":\"62086ccd1d88050f3f9d4fe2124844dcfaac8ba6\",\"repo\":\"spa\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"SPA\"],\"id\":\"/chapters/ch04-h5-buildin-widget.html\"});gitalk.render(\"gitalk-container\"); "},"chapters/ch05-validation.html":{"url":"chapters/ch05-validation.html","title":"第四章：数据合法性校验","keywords":"","body":"第 4 章：数据合法性校验 阅读参考资料 表单验证 表单级校验 要求： 在 spa 仓库创建 05-form-validation 目录 复制 rectangle 仓库 v0.5 版本的代码 做以下几个方面的校验： 数据不能为空 数据类型不对，数据不能是字符串，而应该是数字 数据的取值范围错误，宽度和高度都应该大于零 Tab 键进行焦点切换时不进行数据合法性验证 键盘输入字符时不对非法字符进行判断，不拦截非法字符 只有点击计算按钮时才进行数据合法性校验 出现验证错误时，只报告第一个验证的错误 只有数据验证都通过之后，才计算矩形的周长和面积 参考示例： 表单级验证 矩形计算器 v1.0 要求： 进一步完善 rectangle 仓库代码 对矩形的宽度和高度两个字段进行字段级数据合法性校验 数据合法性校验的方面跟表单级验证相同 对非法数据提供清晰明确的错误提示 初始焦点在宽度文本框上，按 Tab 键时，进行数据合法性校验 如果数据不合法，Tab 键不移动到下一个文本框 如果宽度和高度是错误的（上面三种错误的任意一种），点击计算按钮（可以点击多次），不应该计算出周长和面积 对数据合法性校验模块增加单元测试 示例参考： 矩形计算器 v1.0 字段级校验 矩形计算器 v1.1 要求： 进一步完善 rectangle 仓库代码 在字段级验证的基础上添加字符级验证 合法的字符包括：0~9 十个数字、小数点、负号和科学计数法的 e 和 E 非法字符，除了上面合法字符以外的字母和标点符号 在矩形的宽度和高度输入框中输入非法字符，非法字符不会出现在文本框中 对字符过滤模块增加单元测试 参考示例： 矩形计算器 v1.1 字符级校验 H5 校验 要求： 在 spa 仓库创建 06-h5-validation 目录 复制 rectangle 仓库 v1.0 版本的代码 利用 H5 内置控件提供的数据合法性校验功能 实现字段级和字符级数据合法性校验 通往 H5 验证的伪类来提供数据验证与否的标记 参考示例： H5 校验 2018 -  by 王顶. All rights reserved.本站访客人数  人次document.getElementsByClassName(\"bsz-this-year\")[0].innerHTML = new Date().getFullYear(); window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"086e21b153d1d4f035be\",\"clientSecret\":\"62086ccd1d88050f3f9d4fe2124844dcfaac8ba6\",\"repo\":\"spa\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"SPA\"],\"id\":\"/chapters/ch05-validation.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"086e21b153d1d4f035be\",\"clientSecret\":\"62086ccd1d88050f3f9d4fe2124844dcfaac8ba6\",\"repo\":\"spa\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"SPA\"],\"id\":\"/chapters/ch05-validation.html\"});gitalk.render(\"gitalk-container\"); "},"chapters/ch06-third-part-component.html":{"url":"chapters/ch06-third-part-component.html","title":"第五章：第三方组件","keywords":"","body":"第 5 章：第三方组件 阅读参考资料 H5 原生 UI 组件 二进熵函数 基本要求： 在 spa 仓库创建 31-echart 目录 使用 EChart 组件绘制二进熵函数曲线 二进熵函数：H(p) = -p*log(p)-(1-p)log(1-p) 二进熵函数中 p 是概率，取值范围是 0~1 之间 二进熵函数的对数底数是 2 参考资料： EChart 的官方文档 示例参考： 二进熵函数 百度地图 基本要求： 在 spa 仓库创建 32-map 目录 展示百度地图 百度地图的中心点为河北师大软件学院 在地图上标注 505 教室 信息窗口中显示课程名字、地点、时间和老师的头像信息 软件学院的地图坐标是：114.529963, 38.003679 参考资料： 百度地图官方网站 百度地图核心类 百度地图示例 示例参考： 百度地图 语法高亮 基本要求： 在 spa 仓库创建 33-hightlight 目录 使用 behave 插件让 textarea 文本框具有 IDE 的代码编辑功能 点击添加按钮后 textarea 文本框中的代码添加到页面上 页面上的代码呈现出语法高亮 页面上的代码可以删除 参考资料： behave.js highlight.js 仓库 highlight.js 官网 示例参考： 语法高亮 Excel 表格 基本要求： 在 spa 仓库创建 34-excel 目录 使用 handsontable 插件在页面上显示一个 Excel 表格 表格提供上下文菜单 在页面上显示一个有意义的数据 参考资料： handsontable 示例参考： Excel 表格 数学公式编辑（选做） 基本要求： 在 spa 仓库创建 35-formula 目录 使用 Mathquill 插件在页面上实现一个数学公式编辑功能 通过添加按钮将数学公式编辑框中的数学公式添加到页面上 参考资料： Mathquill 示例参考： 数学公式编辑 2018 -  by 王顶. All rights reserved.本站访客人数  人次document.getElementsByClassName(\"bsz-this-year\")[0].innerHTML = new Date().getFullYear(); window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"086e21b153d1d4f035be\",\"clientSecret\":\"62086ccd1d88050f3f9d4fe2124844dcfaac8ba6\",\"repo\":\"spa\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"SPA\"],\"id\":\"/chapters/ch06-third-part-component.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"086e21b153d1d4f035be\",\"clientSecret\":\"62086ccd1d88050f3f9d4fe2124844dcfaac8ba6\",\"repo\":\"spa\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"SPA\"],\"id\":\"/chapters/ch06-third-part-component.html\"});gitalk.render(\"gitalk-container\"); "},"chapters/ch07-diy-ui-component.html":{"url":"chapters/ch07-diy-ui-component.html","title":"第六章：自定义 UI 组件","keywords":"","body":"第 6 章：自定义 UI 组件 阅读参考资料 构建表单小工具 web component jspaint 前端工程：基础篇 矩形计算器 v1.2 基本要求： 进一步完善 rectangle 仓库代码 在界面的右上角增加 fork-me-on-github UI 组件 在界面的右下角增加网站计数器 UI 组件 两个组件的网址如下：http://i.wangding.co/js/fork-me-github.js http://i.wangding.co/js/bsz-page-footer.js 示例参考： 矩形计算器 v1.2 定时器按钮组件 基本要求： 在 spa 仓库创建 41-timer-button 目录 封装定时器按钮组件 封装后的代码文件包括：一个 js 文件和一个 css 文件 定时器按钮支持两种应用场景 场景一：初始状态禁用，倒计时后，按钮启用，启用后按钮可以点击，点击后按钮一直处于启用状态 场景二：初始状态启用，点击按钮后，按钮禁用，倒计时，倒计时结束后，按钮启用，循环往复 创建定时器按钮时，可以通过参数初始化： container：创建定时器按钮的容器 tLength：定时器时长 enable：定时器按钮的初始状态 title：定时器按钮的文字 定时器按钮启用状态，被点击时，执行个性化的事件处理，而不是写死在组件中的事件处理 编写定时器按钮的测试页面 示例参考： 定时器按钮 密码可见组件 基本要求： 在 spa 仓库创建 42-password-visual 目录 封装密码可见组件 封装后的代码文件包括：一个 js 文件和一个 css 文件 创建密码可见组件时，可以通过参数初始化： container: 创建密码可见组件的容器 密码可见组件暴露一个 getPwd 方法，返回密码明文 编写密码可见组件的测试页面 示例参考： 密码可见 jsnotepad 转到对话框 基本要求： 在 GitHub 上创建 jsnotepad 项目仓库 实现 grunt 自动化构建，包括：静态代码检查、单元测试和性能优化构建任务 打开 win10 notepad 程序，调出转到对话框 把转到对话框屏幕截图，测量对话框中各个控件的位置和尺寸数据，参考下图： 根据上面测量的数据，编写转到对话框组件的 CSS 样式表 后续作业任务中的 jsnotepad 界面组件的样式表文件的编写，于此类似 实现转到对话框 转到对话框的样式以及功能参考 win10 的记事本程序 转到对话框要实现字符级和集中数据合法性校验 错误信息气泡提示框的实现，请参考：制作 CSS 气泡框 转到对话框要实现参数初始化 编写测试页面，测试转到对话框，如下图所示： 示例参考： 转到对话框 jsnotepad 关于对话框 基本要求： 实现关于对话框 关于对话框的样式、内容以及功能参考 win10 的记事本程序 编写测试页面，测试关于对话框，如下图所示： 示例参考： 关于对话框 jsnotepad 查找对话框 基本要求： 实现查找对话框 查找对话框的样式以及功能参考 win10 的记事本程序 编写测试页面，测试查找对话框 示例参考： 查找对话框 jsnotepad 查找替换对话框 基本要求： 实现查找替换对话框 查找替换对话框的样式以及功能参考 win10 的记事本程序 编写测试页面，测试查找替换对话框 示例参考： 查找替换对话框 jsnotepad 列表框组件 基本要求： 实现字体对话框中的列表框组件 列表框组件的样式以及功能参考 win10 的记事本程序 编写测试页面，测试列表框组件，如下图所示 示例参考： 列表框组件 jsnotepad 字体对话框 基本要求： 实现字体对话框 字体对话框的样式以及功能参考 win10 的记事本程序 编写测试页面，测试字体对话框 示例参考： 字体对话框 jsnotepad 状态栏 基本要求： 实现状态栏 状态栏的样式、内容以及功能参考 win10 的记事本程序 编写测试页面，测试状态栏组件 示例参考： 状态栏组件 jsnotepad 菜单栏 基本要求： 实现菜单栏 菜单栏的样式、内容以及功能参考 win10 的记事本程序 编写测试页面，测试菜单栏组件 示例参考： 菜单栏组件 jsnotepad 文本编辑组件 基本要求： 实现主窗体区域的文本编辑组件 文本编辑组件的样式以及功能参考 win10 的记事本程序 编写测试页面，测试文本编辑组件 示例参考： 文本编辑组件 2018 -  by 王顶. All rights reserved.本站访客人数  人次document.getElementsByClassName(\"bsz-this-year\")[0].innerHTML = new Date().getFullYear(); window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"086e21b153d1d4f035be\",\"clientSecret\":\"62086ccd1d88050f3f9d4fe2124844dcfaac8ba6\",\"repo\":\"spa\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"SPA\"],\"id\":\"/chapters/ch07-diy-ui-component.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"086e21b153d1d4f035be\",\"clientSecret\":\"62086ccd1d88050f3f9d4fe2124844dcfaac8ba6\",\"repo\":\"spa\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"SPA\"],\"id\":\"/chapters/ch07-diy-ui-component.html\"});gitalk.render(\"gitalk-container\"); "},"chapters/ch08-spa-mvc.html":{"url":"chapters/ch08-spa-mvc.html","title":"第七章：SPA 和 MVC","keywords":"","body":"第 7 章：SPA 和 MVC 阅读参考资料 SPA MVC、MVP 和 MVVM 前端路由 URL 中的井号 前端路由 基本要求： 在 spa 仓库创建 51-fe-router 目录 页面中有一个 div 块，宽 200px，高 200px，水平居中，默认绿色 使用前端路由，例如：http://ip-addr:8080/#/red 控制页面中 div 的颜色 在 chrome 中测试这个程序，改变 URL 地址后面的颜色单词，观察 div 块的变化 点击浏览器的导航键，前进、后退，观察 div 块颜色的变化 示例参考： 前端路由 MVC 基本要求： 在 spa 仓库创建 52-mvc 目录 页面上品字摆放三个视图（View） 一个视图（View）作为控制器，利用滑杆控件改变整数 num，变化范围：[0-255] 另两个视图（View）用来可视化显示数值大小 其中一个视图用 DIV 块的大小来反映 num 另一个视图用 DIV 块的颜色来反映 num 用 MVC 框架实现整个程序，将后两个视图绑定到 num 上 num 变化时，通知后两个视图，改变 DIV 的大小和颜色 示例参考： MVC jsnotepad 外壳 基本要求： 实现 jsnotepad 外壳 index.html 文件 index.html 文件加载所有 UI 组件的 JS 和 CSS 文件 外壳页面加载完成后，在浏览器窗口依次显示：菜单栏、编辑器和状态栏三个组件 在菜单栏的特定菜单项中弹出相应的对话框组件 测试 jsnotepad jsnotepad 帮助菜单功能 基本要求： 实现 jsnotepad 帮助菜单下各菜单项的相应功能 菜单项的功能参考 win10 的记事本程序 测试 jsnotepad jsnotepad 查看菜单功能 基本要求： 实现 jsnotepad 查看菜单下各菜单项的相应功能 菜单项的功能参考 win10 的记事本程序 测试 jsnotepad jsnotepad 格式菜单功能 基本要求： 实现 jsnotepad 格式菜单下各菜单项的相应功能 菜单项的功能参考 win10 的记事本程序 测试 jsnotepad jsnotepad 编辑菜单功能 基本要求： 实现 jsnotepad 编辑菜单下各菜单项的相应功能 菜单项的功能参考 win10 的记事本程序 测试 jsnotepad 2018 -  by 王顶. All rights reserved.本站访客人数  人次document.getElementsByClassName(\"bsz-this-year\")[0].innerHTML = new Date().getFullYear(); window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"086e21b153d1d4f035be\",\"clientSecret\":\"62086ccd1d88050f3f9d4fe2124844dcfaac8ba6\",\"repo\":\"spa\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"SPA\"],\"id\":\"/chapters/ch08-spa-mvc.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"086e21b153d1d4f035be\",\"clientSecret\":\"62086ccd1d88050f3f9d4fe2124844dcfaac8ba6\",\"repo\":\"spa\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"SPA\"],\"id\":\"/chapters/ch08-spa-mvc.html\"});gitalk.render(\"gitalk-container\"); "},"chapters/ch09-data-storage.html":{"url":"chapters/ch09-data-storage.html","title":"第八章：数据存储","keywords":"","body":"第 8 章：数据存储 阅读参考资料 web storage 操作浏览器历史 浏览器数据库 IndexedDB 入门教程 localstorage 状态保持 在 spa 仓库创建 61-store-clicking 用 localstorage 保存按钮点击的次数 页面上按钮的文字中显示被点击的次数 测试程序，点击按钮，检查点击次数，刷新页面，看点击数是否清零 示例参考： 保存点击次数 localstorage 保存图片 在 spa 仓库创建 62-store-image 页面上文本框中输入图片的 URL 地址 点击保存按钮，将图片保存到 localstorage 中，并显示在页面上 测试程序，点击保存按钮，检查页面上是否有图片 刷新页面，看页面上的图片是否存在 示例参考： 保存图片 history 状态保持 在 spa 仓库创建 63-click-history 用 history 保存按钮点击的次数 页面上按钮的文字中显示被点击的次数 测试程序，点击按钮，检查点击次数，刷新页面，看点击数是否清零 点击浏览器的导航键，前进、后退，观察按钮文字的变化 示例参考： 保存点击次数 jsnotepad 状态保持 基本要求： 保存 jsnotepad 应用的状态，用户下次访问应用时，能够恢复到上次退出时的状态 状态包括： 编辑器中的文本内容 编辑器中的文本字体、样式、字号 编辑器中光标的位置 编辑器是否换行 是否显示状态栏 jsnotepad 文件菜单功能 基本要求： 实现 jsnotepad 文件菜单下各菜单项的相应功能 菜单项的功能参考 win10 的记事本程序 测试 jsnotepad 2018 -  by 王顶. All rights reserved.本站访客人数  人次document.getElementsByClassName(\"bsz-this-year\")[0].innerHTML = new Date().getFullYear(); window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"086e21b153d1d4f035be\",\"clientSecret\":\"62086ccd1d88050f3f9d4fe2124844dcfaac8ba6\",\"repo\":\"spa\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"SPA\"],\"id\":\"/chapters/ch09-data-storage.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"086e21b153d1d4f035be\",\"clientSecret\":\"62086ccd1d88050f3f9d4fe2124844dcfaac8ba6\",\"repo\":\"spa\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"SPA\"],\"id\":\"/chapters/ch09-data-storage.html\"});gitalk.render(\"gitalk-container\"); "},"chapters/setup-dev-env.html":{"url":"chapters/setup-dev-env.html","title":"搭建 Node.js 开发环境","keywords":"","body":"搭建 Node.js 开发环境 本文档基于 Linux CentOS 7 发行版，搭建基于命令行的 Node.js 开发环境。下面的安装步骤，如果没有特殊说明，一定不要在 root 账户下操作。 下载软件包 在 Win10 操作系统下载下列软件包： 从腾讯软件中心下载 VMWare Worksation Pro 最新版 从腾讯软件中心下载 XShell 最新版 从 CentOS 官网下载 CentOS 安装镜像包 安装软件包 在 Win10 操作系统安装下列软件包： 安装 VMWare Workstation 安装 XShell 安装 Linux 虚拟机 创建空白虚拟机 运行 vmware workstation pro 软件，创建一个空白虚拟机，操作如下： vmware 软件窗口中点击“创建新的虚拟机”按钮 出现新建虚拟机向导对话框 您希望选择什么类型的配置，选择“自定义（高级）”，点击“下一步”按钮 虚拟机硬件兼容性配置，使用默认设置，点击“下一步”按钮 安装来源，选择“稍后安装操作系统”来创建一个空白的虚拟机，点击“下一步”按钮 客户端操作系统，选择“Linux”，版本，选择“CentOS 64位”，点击“下一步”按钮 虚拟机名称和位置，使用默认设置或者自己定义，点击“下一步”按钮 处理器配置，使用默认设置：1 个 CPU 1 个内核，点击“下一步”按钮 内存配置，使用默认设置：1024 M（1G 内存），点击“下一步”按钮 网络连接配置，使用默认设置：使用网络地址转换（NAT），点击“下一步”按钮 I/O 控制器类型，使用默认设置：LSI Logic（推荐），点击“下一步”按钮 选择磁盘，使用默认设置：创建新虚拟磁盘，点击“下一步”按钮 指定磁盘容量，使用默认设置：20 G，并选择“将虚拟磁盘存储为单个文件”，点击“下一步”按钮 磁盘文件名称：使用默认设置，点击“下一步”按钮 已经准备好虚拟机，点击“完成”按钮 设置虚拟机硬件 在刚创建的空白虚拟机上，需要进一步编辑虚拟机设置，操作如下： 移除声卡硬件 移除 USB 控制器硬件 移除打印机硬件 CD/DVD 使用 ISO 镜像文件：点击“浏览”按钮，找到下载的 CentOS ISO 镜像文件 指定显示器设置，配置监视器器的分辨率为：1024 X 768 最后，点击“确定”按钮，完成虚拟机硬件设置 安装操作系统 点击“开启虚拟机”绿色三角按钮，虚拟机窗口出现电脑自检画面，安装向导界面中，进行如下操作设置： 【有待完善】 第一个安装画面：选择安装 CentOS 7 语言：中文 安全策略：Common Profile for General-Purpose Systems 软件选择： 安装介质 安装位置 网络启用 root 密码 创建新用户并设置密码，把新用户加到管理员组中 设置虚拟机 IP 地址 【有待完善】 通过 XShell 连接 Linux 虚拟机 【有待完善】 此后的所有安装步骤都是在 Linux 虚拟机中进行操作。 安装 vim 8 # 安装工具软件和依赖库 sudo yum install -y ruby ruby-devel lua lua-devel luajit wget unzip \\ luajit-devel ctags git python python-devel \\ python3 python3-devel tcl-devel ncurses-devel\\ perl perl-devel perl-ExtUtils-ParseXS \\ perl-ExtUtils-XSpp perl-ExtUtils-CBuilder \\ perl-ExtUtils-Embed gcc lrzsz ncurses-devel # 切换到家目录 cd # 创建 GitHub 仓库根目录 mkdir repos cd repos # 下载 vim 源代码 wget https://github.com/vim/vim/archive/master.zip # 解压缩源代码 unzip master.zip # 切换到 vim 源代码目录 cd vim-master/src # 配置 vim ./configure --with-features=huge \\ --enable-multibyte \\ --enable-rubyinterp=yes \\ --enable-pythoninterp=yes \\ --with-python-config-dir=/usr/lib/python2.7/config \\ --enable-perlinterp=yes \\ --enable-luainterp=yes \\ --enable-gui=gtk2 \\ --enable-cscope \\ --prefix=/usr/local # 编译软件 make # 安装软件 sudo make install # 检查 vim 版本，应该是 8 vim --version 上面是源代码编译安装，或者使用 yum 安装 # 切换到 root 账户下 su rpm -Uvh http://mirror.ghettoforge.org/distributions/gf/gf-release-latest.gf.el7.noarch.rpm rpm --import http://mirror.ghettoforge.org/distributions/gf/RPM-GPG-KEY-gf.el7 yum -y remove vim-minimal vim-common vim-enhanced sudo yum -y --enablerepo=gf-plus install vim-enhanced sudo # 切换到 wangding 账户 exit # 检查 vim 版本，应该是 8 vim --version 安装 node.js sudo yum install -y gcc-c++ make curl --location https://rpm.nodesource.com/setup_10.x | sudo bash - sudo yum install -y nodejs # 检查 node.js 安装是否成功 node -v # 检查 npm 是否安装成功 npm -v 安装 zsh zsh 的安装过程如下： # 查看当前的 shell echo $SHELL # 安装 zsh sudo yum install -y zsh # 安装 wget sudo yum install -y wget # 安装 oh-my-zsh wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh # 却换 bash 至 zsh chsh -s /bin/zsh # 查新登录 shell exit # 连接 XShell，重新登录 Linux 检查命令行提示符变化 安装 vim 和 zsh 配置文件 安装完 vim 和 zsh 配置文件后，需要安装 zsh 插件。特别注意，安装 zsh 插件的过程不要中途退出，一定要等到出现命令行提示符再进行其他操作。 # 切换到 repos 目录 cd ~/repos # 克隆 wangding/tools 仓库 git clone https://github.com/wangding/tools # 安装配置文件 cd tools ./install.sh # 检查配置文件 ls -al ~ # .vimrc 文件应该存在 # .zshrc 文件应该存在 # 安装 zsh 插件，注意安装过程不要中途退出，一定要等到出现命令行提示符再进行其他操作 zsh # 退出当前 Shell exit # 连接 XShell，重新登录 Linux，zsh 的主题和插件都应该安装成功 安装 vim 插件管理工具 Vundle mkdir -p ~/.vim/bundle cd ~/.vim/bundle git clone https://github.com/VundleVim/Vundle.vim.git 安装 vim 插件 注意：安装 vim 插件的过程，不要中途退出，一定要等到所有插件都安装完成后，再进行其他操作。安装插件的过程如下图所示。 # 运行 vim 编辑器 vim # 安装 vim 插件 :PluginInstall # 退出 vim 插件安装 :q # 退出 vim :q 安装 tern_for_vim 的第三方依赖 # 切换到 tern_for_vim 目录 cd ~/.vim/bundle/tern_for_vim # 安装第三方依赖 npm Install 安装 YCM # 安装开发工具 sudo yum install -y automake gcc gcc-c++ kernel-devel cmake python-devel python3-devel # 切换到 YCM 目录 cd ~/.vim/bundle/YouCompleteMe # 安装 YCM ./install.py --tern-completer 安装开发辅助工具 su // 切换到 root 账户 yum install -y tree python-pygments // 安装 Linux 命令行 tree 工具和语法高亮工具 npm i -g htmlhint // 安装 HTMLHint 静态代码检查工具 npm i -g csslint // 安装 CSSLint 静态代码检查工具 npm i -g eslint // 安装 ESLint 静态代码检查工具 npm i -g browser-sync // 安装热加载工具 su wangding // 切换到开发者账户 检查开发辅助工具 tree /boot // 应该看到 boot 目录的树状结构 htmlhint --version // 应该看到版本号：0.9.13 或以上 csslint --version // 应该看到版本号：v1.0.4 或以上 eslint --version // 应该看到版本号：v4.17.0 或以上 browser-sync --version // 应该看到版本号：2.23.6 或以上 检查 vim 插件 验证 JavaScript 代码补全插件，操作步骤如下： cd mkdir test cd test touch .tern-project vim .tern-project .tern-project 文件的内容如下： { \"libs\": [\"browser\", \"jquery\"], \"plugins\": { \"node\": {} } } vim a.js i // 进入 vim 的插入模式 window. // 输入 window 然后按 . 看一下是否有 window 对象的属性、方法列出 Tab // 按键盘 tab 键，在 window 对象的属性、方法上切换 ( // 切换到 Date 按左括号 (，移动光标到行尾，输入分号 ; Enter X 2 // 按两次回车键 $. // 输入 $ 然后按 . 看一下是否有 JQuery $ 对象的属性、方法列出 // 如果没有自动补全的列表，删除 . 重新输入 . 再一两次 // 切换到 isArray 按左括号 (，移动光标到行尾，输入分号 ; Enter X 2 // 按两次回车键 process. // 输入 process 然后按 . 看一下是否有 process 对象的属性、方法列出 // 输入 ar，tab 键选择 argv，输入分号 ; :q! // 不保存退出 验证 emmet vim 插件，操作步骤如下： vim a.html // 命令行打开 vim 编辑器 i // 进入插入模式 !+y, // 输入感叹号，然后同时按 ctrl 和 y 键，然后按逗号键 // vim 窗口中应该出现 HTML5 的页面框架代码 :q! // 不保存退出 验证 jsdoc vim 插件，操作步骤如下： vim a.js // 命令行打开 vim 编辑器 i // 进入插入模式 // 写一个 x + y 的 add 加法函数，代码如下 function add(x, y) { return x + y; } ESC // 退出插入模式，进入普通模式，移动光标到第一行 :JsDoc // 按冒号进入命令模式，输入 JsDoc，注意命令大小写不要写错 // vim 窗口中应该出现函数头注释框架 :q! // 不保存退出 验证 CSS 代码补全功能，操作步骤如下： vim a.css // 命令行打开 vim 编辑器 i // 进入插入模式 // 写一个 body 的 CSS 样式代码，如下： body { background: // 注意在输入冒号和空格之后，应该弹出代码补全窗口 ESC // 回到普通模式 :q! // 不保存退出 2018 -  by 王顶. All rights reserved.本站访客人数  人次document.getElementsByClassName(\"bsz-this-year\")[0].innerHTML = new Date().getFullYear(); window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"086e21b153d1d4f035be\",\"clientSecret\":\"62086ccd1d88050f3f9d4fe2124844dcfaac8ba6\",\"repo\":\"spa\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"SPA\"],\"id\":\"/chapters/setup-dev-env.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"086e21b153d1d4f035be\",\"clientSecret\":\"62086ccd1d88050f3f9d4fe2124844dcfaac8ba6\",\"repo\":\"spa\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"SPA\"],\"id\":\"/chapters/setup-dev-env.html\"});gitalk.render(\"gitalk-container\"); "},"chapters/mocha-dev-env.html":{"url":"chapters/mocha-dev-env.html","title":"升级开发环境","keywords":"","body":"升级开发环境 Mocha 虚拟机开发环境，可以完成 Node.js 后端开发。下面的安装步骤将使这个开发环境具备前端开发能力。另外，Node.js 后端开发环境也需要进行升级。 在确保自己的虚拟机能上网的前提下，执行以下搭建前端开发环境的步骤： 更新 tools 仓库 cd cd wd rm -rf tools git clone https://github.com/wangding/tools 安装 tools 仓库的 vim 配置文件 cd cd wd/tools cp .vimrc ~ 安装 vim 插件 注意：安装过程中，不要中途退出。一定要等 vim 提示 Done 后，才能退出。 vim // 命令行打开 vim 编辑器 :PluginInstall // vim 的普通模式下，按冒号进入命令模式 // 输入 PluginInstall 命令，注意命令的大小写 :q // vim 提示 Done 时，:q 退出安装界面 :q // 退出 vim 验证安装的 emmet vim 插件 vim a.html // 命令行打开 vim 编辑器 i // 进入插入模式 !+y, // 输入感叹号，然后同时按 ctrl 和 y 键，然后按逗号键 // vim 窗口中应该出现 HTML5 的页面框架代码 :q! // 不保存退出 验证安装的 jsdoc vim 插件 vim a.js // 命令行打开 vim 编辑器 i // 进入插入模式 // 写一个 x + y 的 add 加法函数，代码如下 function add(x, y) { return x + y; } ESC // 退出插入模式，进入普通模式，移动光标到第一行 :JsDoc // 按冒号进入命令模式，输入 JsDoc，注意命令大小写不要写错 // vim 窗口中应该出现函数头注释框架 :q! // 不保存退出 验证 CSS 代码补全功能 vim a.css // 命令行打开 vim 编辑器 i // 进入插入模式 // 写一个 body 的 CSS 样式代码，如下： body { background: // 注意在输入冒号和空格之后，应该弹出代码补全窗口 ESC // 回到普通模式 :q! // 不保存退出 验证代码注释工具 vi a.js // 命令行打开 vim 编辑器 i // 进入插入模式，接下来，写六行代码 var name = 'wangding', qq = '408542507', log = console.log; log(`name: ${name}`); log(`qq : ${qq}`); ESC // 回到普通模式 // 上下移动光标到任意一行代码 cc // 按空格和两个 c 键，对当前行注释 c // 按空格和 c 键以及空格键，取消当前行注释 V // 块选当前行 jj // 向下选中两行 cc // 对选中多行进行注释。取消注释，选中多行，按c 安装开发辅助工具 su // 切换到 root 账户 yum install -y tree // 安装 Linux 命令行 tree 工具和语法高亮工具 npm i -g htmlhint // 安装 HTMLHint 静态代码检查工具 npm i -g csslint // 安装 CSSLint 静态代码检查工具 npm i -g eslint // 安装 ESLint 静态代码检查工具 npm i -g browser-sync // 安装热加载工具 exit // 切换到开发者账户 wangding 验证 JavaScript 前端代码自动补全和后端代码补全 cd mkdir spa cd ~/spa wget https://sample.wangding.co/nodejs/tern-project mv tern-project .tern-project vim a.js // 命令行打开 vim 编辑器 i // 进入插入模式 window. // 输入 window 和点之后看到浏览器窗口对象 window 的方法提示 ESC // 回到普通模式 :q! // 不保存退出 vim a.js // 命令行打开 vim 编辑器 i // 进入插入模式 $. // 输入 $ 和点之后看到 jQuery 全局对象 $ 的方法提示 ESC // 回到普通模式 :q! // 不保存退出 vim a.js // 命令行打开 vim 编辑器 i // 进入插入模式 process. // 输入 process 和点之后看到 node.js 全局对象 process 的方法提示 ESC // 回到普通模式 :q! // 不保存退出 安装 nvm 并升级 node.js 版本 curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash 上面的安装步骤结束后，编辑 .zshrc 文件，执行命令：vi ~/.zshrc。在 zshrc 文件的最后增加下面两行代码： alias lrd=\"browser-sync start --server --port 8080 --no-open --files .\" alias pl=\"sudo firewall-cmd --zone=public --list-ports\" export NVM_DIR=\"$HOME/.nvm\" [ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\" # This loads nvm 保存 .zshrc 文件的修改，退出 vim。执行 linux bash 命令 exit 退出控制台，XShell 重新连接虚拟机。 升级 Node.js 版本到 10.16.3，执行下面的命令： node -v // 当前的 Node.js 版本应该是 6 nvm install 10 node -v // 升级后 Node.js 版本应该是 10 验证开发辅助工具 tree ~/wd // 应该看到 wd 目录的树状结构 htmlhint --version // 应该看到版本号不低于：0.9.13 csslint --version // 应该看到版本号不低于：v1.0.4 eslint --version // 应该看到版本号不低于：v4.17.0 browser-sync --version // 应该看到版本号不低于：2.23.6 掌握工具用法 Vim 代码编辑器 阅读 Vim 笔记 执行下列命令cd // 回到家目录 git clone https://github.com/wangding/jsnotepad tree jsnotepad // 查看 jsnotepad 项目下的代码文件 用 vim 打开 jsnotepad 项目中自己感兴趣的代码文件 html, css 或 js win 10 浏览器窗口（查看 vim 笔记）和 XShell 终端窗口平铺，左边是笔记，右边是终端窗口 对照左边文档，在终端窗口中练习 vim 的用法 Emmet 工具 安装 Emmet vim 插件，上面的开发环境搭建已经介绍过了 Emmet 工具在 vim 编辑器中的快捷键：+y, Emmet 语法，请参考：https://docs.emmet.io/abbreviations/syntax/ Emmet vim 插件用法，请参考：https://github.com/mattn/emmet-vim/blob/master/TUTORIAL 掌握 Emmet vim 常用的快捷键，+y，逗号，d，a，m，k，/，n 创建一个 emmet.html 文件，在 vim 中打开此文件，练习 Emmet 插件的用法 静态代码检查工具 安装静态代码检查工具，上面的开发环境搭建已经介绍过了 HTML 静态代码检查的规则，请参考：https://segmentfault.com/a/1190000013276858 CSS 静态代码检查的规则，请参考：https://github.com/CSSLint/csslint/wiki/Rules JavaScript 静态代码检查的规则，请参考：http://eslint.cn/docs/rules/ 创建 HTML、CSS 和 JavaScript 三个代码文件，在 vim 中编辑代码，体验静态代码检查插件的用法 热加载工具 安装热加载工具，上面的开发环境搭建已经介绍过了 执行如下操作，掌握热加载工具的用法： cd ~/spa // 进入前端页面所在的目录 lrd // 运行热加载程序，热加载程序会启动一个 Web 静态文件服务 // 在 XShell 另一个控制台窗口编写代码 vi index.html i // 进入插入模式 ! ctrl + y, // 产生 H5 页面框架代码 ESC // 从插入模式回到普通模式 w // 同时按下空格和 w 键，保存代码 打开 win10 的 chrome 浏览器 输入热加载程序提示的 URL 地址 chrome 浏览器中应该能看到刚才编写的页面代码 修改网页代码，保存，chrome 浏览器会自动刷新 通过热加载，浏览器能实时反映出页面的最新变化 不用手动刷新，提高开发效率 退出热加载按 Ctrl + C 2018 -  by 王顶. All rights reserved.本站访客人数  人次document.getElementsByClassName(\"bsz-this-year\")[0].innerHTML = new Date().getFullYear(); window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"086e21b153d1d4f035be\",\"clientSecret\":\"62086ccd1d88050f3f9d4fe2124844dcfaac8ba6\",\"repo\":\"spa\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"SPA\"],\"id\":\"/chapters/mocha-dev-env.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"086e21b153d1d4f035be\",\"clientSecret\":\"62086ccd1d88050f3f9d4fe2124844dcfaac8ba6\",\"repo\":\"spa\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"SPA\"],\"id\":\"/chapters/mocha-dev-env.html\"});gitalk.render(\"gitalk-container\"); "},"chapters/gogs-drone-ci.html":{"url":"chapters/gogs-drone-ci.html","title":"搭建 gogs + drone 持续集成环境","keywords":"","body":"gogs-drone-ci 搭建 gogs + drone 持续集成系统 start gogs docker run -d \\ -e TZ=\"Asia/Shanghai\" \\ -v /data \\ --net host \\ --restart=always \\ --name=gogs \\ gogs/gogs:0.11.29 gogs use v0.11.29, latest version webhook not work 默认端口为 3000，使用宿主的 IP 地址访问 gogs 服务 配置 gogs，使用 sqllite 数据库 注册创建账户 wangding，第一个账户默认为管理员账户 创建空的测试仓库 demo 克隆 demo 仓库，git clone http://192.168.174.133:3000/wangding/demo.git cd demo && echo 'hello' > a.txt git add . git commit -m \"add a.txt\" git push 检查 gogs 上的 demo 仓库，有最新的提交 start drone docker run -d \\ -v /data \\ -e DRONE_AGENTS_ENABLED=true \\ -e DRONE_GOGS_SERVER=http://192.168.174.133:3000 \\ -e DRONE_RPC_SECRET=mydrone666 \\ -e DRONE_SERVER_HOST=192.168.174.133:8888 \\ -e DRONE_SERVER_PROTO=http \\ -e DRONE_USER_CREATE=username:wangding,admin:true \\ -e TZ=\"Asia/Shanghai\" \\ -p 8888:80 \\ --restart=always \\ --name=drone \\ drone/drone:1 注意 DRONE_GOGS_SERVER 和 DRONE_SERVER_HOST 两个参数的 IP 地址，使用宿主的 IP 地址 端口号是 8888 访问 drone 服务，http://192.168.174.133:8888 用 gogs 的 wangding 账户登录 可以看到 demo 仓库，激活 demo 仓库的自动化构建，勾选 project setting: trusted，允许 runner 构建 docker 镜像 检查 gogs demo 仓库的 webhook 配置，drone 自动添加了 webhook 配置 start drone-runner docker run -d \\ -v /var/run/docker.sock:/var/run/docker.sock \\ -e DRONE_RPC_PROTO=http \\ -e DRONE_RPC_HOST=192.168.174.133:8888 \\ -e DRONE_RPC_SECRET=mydrone666 \\ -e DRONE_RUNNER_CAPACITY=2 \\ -e DRONE_RUNNER_NAME=runner-docker \\ -e TZ=\"Asia/Shanghai\" \\ -p 9999:3000 \\ --restart=always \\ --name=runner-docker \\ drone/drone-runner-docker:1 注意 DRONE_RPC_HOST 参数的 IP 地址，使用宿主的 IP 地址 2018 -  by 王顶. All rights reserved.本站访客人数  人次document.getElementsByClassName(\"bsz-this-year\")[0].innerHTML = new Date().getFullYear(); window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"086e21b153d1d4f035be\",\"clientSecret\":\"62086ccd1d88050f3f9d4fe2124844dcfaac8ba6\",\"repo\":\"spa\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"SPA\"],\"id\":\"/chapters/gogs-drone-ci.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"086e21b153d1d4f035be\",\"clientSecret\":\"62086ccd1d88050f3f9d4fe2124844dcfaac8ba6\",\"repo\":\"spa\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"SPA\"],\"id\":\"/chapters/gogs-drone-ci.html\"});gitalk.render(\"gitalk-container\"); "},"chapters/video.html":{"url":"chapters/video.html","title":"课程视频清单","keywords":"","body":"课程视频清单 注意： 课程视频放在 B 站，登录 B 站后，课程视频可以高清观看 视频中的代码文字较小，最好在电脑上观看视频，不适合在手机上观看 课程说明 课程说明 Web 应用简介 搭建开发环境 第一个 Web APP: 矩形计算器 自动化构建 自动化构建概述 自动化构建概述 GitBook 电子书手动构建 GitBook 电子书自动构建 构建任务：预处理 构建任务：预处理 构建任务：静态代码检查 HTML 静态代码检查 CSS 静态代码检查 JavaScript 静态代码检查 构建任务：单元测试 2.4.1 单元测试概述 单元测试概述 2.4.2 后端代码单元测试 后端代码单元测试 2.4.3 前端代码单元测试 重构矩形计算器 前端代码单元测试 前端代码自动化单元测试 2.4.4 HTTP API 接口单元测试 实现矩形计算器 HTTP API 接口 HTTP API 接口单元测试 HTTP API 接口自动化单元测试 构建任务：性能优化 2.5.1 性能优化概述 性能优化概述 2.5.2 压缩 代码压缩原理 HTML 代码文件压缩 CSS 和 JavaScript 代码文件压缩 图片性能优化概述 图片文件压缩 2.5.3 打包 代码文件打包 图片文件打包 构建任务：自定义任务 自定义构建任务 总结 构建任务的先后顺序 构建结果的目录结构 打包之 usemin 自动化发布的频率和时机 Git 工作流与自动化构建 UI 概述 接口概述 UI 分类以及 CLIs 简介 图形用户界面的交互要素 图形用户界面的视觉要素 UI 设计原则 H5 内置控件 H5 内置控件概述 H5 滑杆控件案例 定时器按钮案例 数据合法性校验 数据合法性校验概述（上） 数据合法性校验概述（下） 集中校验案例演示 字段校验案例演示 字符校验案例演示 H5 校验案例演示 第三方组件 第三方组件概述 ECharts 组件案例演示 语法高亮组件案例演示 自定义 UI 组件 自定义 UI 组件概述 初步体验自定义 UI 组件 组件化的思路 组件化的好处 UI 组件的分类 封装 UI 组件的技术细节 组件的封装方式 组件的 DOM 绘制和样式设置 组件的参数化及事件绑定 组件的实例化与封装 转到对话框的 DOM 绘制 转到对话框的样式定义 CSS 模块化 Require.js 前端模块化概述 支持延迟加载的定时器按钮组件 UI 组件 DOM 绘制进阶 自定义 UI 组件小结 SPA & MVC SPA 与前端路由 MVC 概述 MVC 案例演示 jsnotepad 应用架构 数据存储 数据存储概述 localstorage 状态保持 localstorage 保存图片 history 状态保持 课程小结 课程回顾串讲 考试复习 2018 -  by 王顶. All rights reserved.本站访客人数  人次document.getElementsByClassName(\"bsz-this-year\")[0].innerHTML = new Date().getFullYear(); window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"086e21b153d1d4f035be\",\"clientSecret\":\"62086ccd1d88050f3f9d4fe2124844dcfaac8ba6\",\"repo\":\"spa\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"SPA\"],\"id\":\"/chapters/video.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"086e21b153d1d4f035be\",\"clientSecret\":\"62086ccd1d88050f3f9d4fe2124844dcfaac8ba6\",\"repo\":\"spa\",\"owner\":\"wangding\",\"admin\":[\"wangding\"],\"labels\":[\"SPA\"],\"id\":\"/chapters/video.html\"});gitalk.render(\"gitalk-container\"); "}}